// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventory (
    product_name, price, currency, stock, updated_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING product_id, product_name, price, currency, stock, updated_at
`

type CreateInventoryParams struct {
	ProductName string             `json:"product_name"`
	Price       pgtype.Numeric     `json:"price"`
	Currency    string             `json:"currency"`
	Stock       int32              `json:"stock"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventory,
		arg.ProductName,
		arg.Price,
		arg.Currency,
		arg.Stock,
		arg.UpdatedAt,
	)
	var i Inventory
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Price,
		&i.Currency,
		&i.Stock,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM inventory
WHERE product_id = $1
`

func (q *Queries) DeleteInventory(ctx context.Context, productID int32) error {
	_, err := q.db.Exec(ctx, deleteInventory, productID)
	return err
}

const getInventory = `-- name: GetInventory :one
SELECT product_id, product_name, price, currency, stock, updated_at FROM inventory
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetInventory(ctx context.Context, productID int32) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventory, productID)
	var i Inventory
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Price,
		&i.Currency,
		&i.Stock,
		&i.UpdatedAt,
	)
	return i, err
}

const listInventory = `-- name: ListInventory :many
SELECT product_id, product_name, price, currency, stock, updated_at FROM inventory
ORDER BY product_id
`

func (q *Queries) ListInventory(ctx context.Context) ([]Inventory, error) {
	rows, err := q.db.Query(ctx, listInventory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.Price,
			&i.Currency,
			&i.Stock,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventory = `-- name: UpdateInventory :exec
UPDATE inventory
  set price = $2,
  currency = $3,
  stock = $4,
  updated_at = $5
WHERE product_id = $1
`

type UpdateInventoryParams struct {
	ProductID int32              `json:"product_id"`
	Price     pgtype.Numeric     `json:"price"`
	Currency  string             `json:"currency"`
	Stock     int32              `json:"stock"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) error {
	_, err := q.db.Exec(ctx, updateInventory,
		arg.ProductID,
		arg.Price,
		arg.Currency,
		arg.Stock,
		arg.UpdatedAt,
	)
	return err
}
