// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"
)

const createOrderByProducName = `-- name: CreateOrderByProducName :one
INSERT INTO orders (
    product_id, quantity, total, status
)
SELECT 
    i.product_id,
    $2::int,
    i.price * $2::numeric,
    'pending'
FROM inventory i
WHERE i.product_name = $1
RETURNING id, product_id, quantity, total, status, created_at
`

type CreateOrderByProducNameParams struct {
	ProductName string `json:"product_name"`
	Column2     int32  `json:"column_2"`
}

func (q *Queries) CreateOrderByProducName(ctx context.Context, arg CreateOrderByProducNameParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrderByProducName, arg.ProductName, arg.Column2)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, product_id, quantity, total, status, created_at FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, product_id, quantity, total, status, created_at FROM orders ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Quantity,
			&i.Total,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders SET status = $1 WHERE id = $2 RETURNING id, product_id, quantity, total, status, created_at
`

type UpdateOrderParams struct {
	Status string `json:"status"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
